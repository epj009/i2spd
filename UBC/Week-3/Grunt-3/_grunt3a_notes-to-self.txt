Week-3a: HtDW.  Important notes to self go here at the top. 

**===== 10/22 morning session; start @ 0505, finish @ 0542 =====**

You did nothing on Sunday, slept late on Monday and in bed early Monday night.
This is the second time this type of thing happened with your studies. Make the 
correction and move on.

Look at main() and the use of big-bang().

Starting with on-tick, this is what happens in the program over time. In this
case, the light color changes, hence the name "next-color" is used for the
function. Next-color uses a conditional and an enumeration for the three color
states of the light.

Next is big-bang's to-draw for which the render-light function is written. Look
at the code:

(define (render-light l)
  BACKGROUND)

(define (render-light l)
  (cond [(string=? l "red")    RON]
        [(string=? l "yellow") YON]
        [(string=? l "green")  GON]))
        
HEY! Both render-light and next-color use the argument l, that is, the only
argument in the program *and* the very argument passed to the program when it's
run, i.e. (main "red").

For on-tick next-color, if l is "red" and a tick occurs, the function runs, goes
to the condition clause with "red" and returns "green".

Then render-light takes the same l from the start of the program, which, to
clarify is still "red", runs and enters its condition clause, and renders
the appropriate solid colored light against the BACKGROUND.

Time passes, as a result the on-tick function of big-bang is invoked to act, and
the cycle starts over. I feel OK with the way this program works. I will move
on to compound data definitions.

**===== 10/19 morning session; start @ 1045, finish @ 1145 =====**

Quick summary: in my old method of solving this problem I "hard wired" all of
the shape sizes and spacing, making it inflexible.  The Prof's solution shows
the value of using constants -- even as arguments for primitive parameters --
to gain flexibility.

Still a bit sick. DANGER WILL ROBINSON! You're at that place where you have the
desire to switch focus to Microsoft Project -- DON'T! You're at that tipping
point and you need to hunker down and keep pressing forward.  You must complete
this course. Once you do, then you can decide what's next.

Traffic light problem: study the solution, as you mentioned in yesterday's note,
and understand the Prof's approach to solving the problem. Journal what you
learn, here. Code the solution. Then on to Compound Data Defs.

OK. Some key BSL primitive information to know & keep in mind as I move forward
trying to understand things:

(rectangle width height mode color)
(square side-len mode color)

Now, the Prof's code again so we can talk about it...

(define RADIUS 20)    ; of each light
(define SPACING 6)    ; space between and beside lights

(define BACKGROUND (rectangle (+ (* 2 SPACING) (* 2 RADIUS))
                              (+ (* 4 SPACING) (* 6 RADIUS))
                              "solid"
                              "black"))

(define SPACE (square SPACING "solid" "black"))
                              
So, why define the constant SPACING? Why not just use the number 6 for all
instances of the constant SPACING, and get on with it? Ah. The answer is
flexibility in changing your traffic light to a scale that you like.

First, as a test, you removed the SPACING constant and replaced it (in the
places shown in the code above) with the number 6. These are the only places
SPACING shows up in all of the code. I used DrRacket's "Check Syntax" to make 
sure the constant wasn't used somewhere further down in the program. The code
worked fine with the number 6 replacement test.

Next I played with the value of the constant SPACING, that is, I changed it from
6 to 12 and noted how the spacing changed *and* the black rectangle scaled
nicely.  Scaling would not be flexible with static values.

The constant SPACE is used ALOT; notice it uses SPACING as the square's side-len
variable for the square primitive.  A square of side-len 6 is pretty small, but
remember, the little black square is used in conjunction with BSL's overlay and
above primitives -- the little square is, at least in my thinking right now,
like padding.  Stopping here and will revisit this in more detail during the
next study session (tonight).

**===== 10/18 morning session; start @ 0511, finish @ 0607 =====**

The brain is a little off this morning. Last night my nose was running and eyes
watering. This morning a slight sniffle but lacking focus.  Pressing on but the
head is a bit cloudy...

Traffic light. I solved this before but in a very different way than the Prof.
I used CONSTANTS much differently than he did. I think I'll really study his
solution file and the ways he uses CONSTANTS to see if I can make sense of it
all. This will probably take a couple of study days, but remember, after this
is compound statements -- that's where you decided to go back and re-do
everything in HtDF and HtDD.

Here's an example of how my thoughts worked in September:

;; - black case
(define LIGHT_RECT (rectangle 40 110 "solid" "black"_)

;; - outlined circles
(define R_OUTL (circle 15 "outline" "red")

;; - solid circles
(define R_SOLID (circle 15 "solid" "red")

This is very different than the Prof's approach. He defines:

(define RADIUS 20)   ; of each light
(define SPACING  6)   ; space between and beside lights

And proceeds with using RADIUS and SPACING liberally, e.g.:

(define BACKGROUND (rectangle (+ (* 2 SPACING) (* 2 RADIUS))
                              (+ (* 4 SPACING) (* 6 RADIUS))
                              "solid"
                              "black"))

**===== 10/17 morning session; start @ 0518, finish @ 0630 =====**

HtDW videos done. It's time to do the first practice problem: add a mouse
handler to reset the position of the moving cat.

First, refer to the HtDW worlds example code and look at the stub code for
big-bang's on-mouse primitive. Take the stub signature:

WS Integer Integer MouseEvent -> WS

Change it to: Cat Integer Integer MouseEvent -> Cat

Insert the new data definition 1) in the new big-bang entry on-mouse and 2) as
the signature for the new function you'll write called handle-mouse.

I think I'm having an "aha!" moment about a correlation between the structure &
information contained in the FIRST part of the signature and the variables used
in the actual function.

For the handle-mouse function, the signature is:

Cat Integer Integer MouseEvent -> Cat

...and the function variables are:

c x y me

...where c is the cat x-coord, x & y must be the location of the mouse click on
MTS, and me is the actual mouse event.  NOTICE that Cat in the signature
corresponds with c in the variables, Integer corresponds with x, Integer corr-
esponds with y, and MouseEvent corresponds with me.

OK, during the writing of the function stub and the first check-expect I made
reference to DrRacket's Help Desk and searched on MouseEvent and learned that
"button down" is part of the MouseEvent data definition (enumeration) so I used
the string "button down" for one of the check-expect variables, and the test
passed.  So, I have a functioning stub and test. Now copy the mouse handler
stub code at the bottom of the HtDW page into your code.

LESSON: you set out thinking that the purpose of the exercise was to reset the
cat back to 0 with the "button down", but the Prof wanted you to make the cat
move to x-coord of where the "button down" event occurred.

Tomorrow (Friday) you animate the design of the traffic light again.


**===== 10/16 morning session; start @ 0605, finish @ 0705 =====**

Adding SPEED. The analysis -- the picture we drew with constant, changing, and
big-bang info. -- is a model of the program (with less detail) that we can use
to plan our work by marking-up (this) paper copy.  Make the structure of the 
program match the analysis. Tweak the analysis then tweak the program.

The cat's SPEED was an unidentified constant.

Now add a key handler, the on-key option to big-bang, and template a function
that operates on a large enumeration, which is useful for on-key and on-mouse
handlers. In this case, press the spacebar and have the cat reset to the left
side of the screen.

When you brought the on-key handler code over from the HtDW template recipe, it
was necessary to modify the stub code:  name the handler (handle-key) and change
the signature.  The template signature was WS KeyEvent -> WS.

You paused the video and tried to change the signature before the prof. When you
did you erroneously changed it to:  Cat Keyevent -> Image. Your error was to 
think that the cat key event imposed itself, or impacted, the image when, in
fact, the cat key event impacts the cat, that number which represents the x
position of the cat image in screen coordinates (see data definition).

White box testing is discussed. Done with HtDW videos.  Do the two problems
next, then it's on to Compound data definitions.

**===== 10/15 morning session; start @ 0530, finish @ 0625 =====**
Stopped at 0625. Next to view is Improving a World Program - Add SPEED.

(define (main c)
  (big-bang c                         ; Cat
            (on-tick   advance-cat)   ; Cat -> Cat
            (to-draw   render)))      ; Cat -> Image
       
The code above bears some discussion because lessons were learned this time
around.

Cat
---
The variable c is the Cat position.  If you start the program with (main 125),
the Cat starts at x-position 125.  Note, too, that when we invoke big-bang we
must tell it where the Cat, c, is.

Cat -> Cat
----------
(define (advance-cat c)
  (+ c 1))
Once we know this position, c, on-tick can use the advance-cat function: recall
that advance-cat takes a cat and produces a cat, i.e., Cat -> Cat. We advance
Cat by adding some value to c, (+ c 1) in this case, and produce a new value of
c.

Cat -> Image
------------
(define (render c)
   (place-image CAT-IMG c CTR-Y MTS))
The render function will also use c as the location it places CAT-IMG using the
place-image primitive.

**===== 10/14 morning session; start @ 0510, finish @ 0625 =====**

I'll soon see if Im wrong about this but it's going to take awhile to really
understand this material well.

At 0615, stopped. Need to view "HtDW - Working through the Wish List" next where
you'll fill-in the helper functions, which are marked with the !!! characters.

There are three (3) signatures in the function part of the program:

Cat -> Cat    ; for starting the big bang world
Cat -> Cat    ; to advance the image one pixel to the right
Cat -> Image  ; to render the cat image at the appropriate place

Each signature has a purpose to explain what's happening & why it's needed.
These concepts are making a little more sense now that I re-did weeks 1 & 2.