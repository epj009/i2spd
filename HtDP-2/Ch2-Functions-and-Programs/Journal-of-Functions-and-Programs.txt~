**===== 12/11 morning; start @ 0600, finish @ 0635** = 35

I really did start at exactly 0600. Starting 2.3 Global Constants. I've also
been reading/scanning the similar topics in the Simply Scheme text.

A new slogan, so there are now two slogans that I'll enumerate here:

1. DEFINE ONE FUNCTION PER TASK.
2. INTRODUCE DEFINITIONS FOR ALL CONSTANTS MENTIONED IN A PROBLEM STATEMENT.

Exercise 26 completed. On to section 2.4, Programs.

"The appearance of an input is an event."

The text doesn't mention it explictly but it seems I'll be using:

(require 2htdp/batch-io)

**===== 12/10 morning; start @ 0554, finish @ 0644** = 50

Notes are in the code. Finished exercise 24. Tinkered with exercise 25, mostly
part #1. The second part will take some time to step through the code and 
understand exactly where the changes need to be made. Of course, the lesson the
authors are teaching here is that the first code example with well defined
CONSTANTS is much easier to change and understand where changes need to be made.
The second code example is cryptic.

**===== 12/9 evening; start @ 2214, finish @ 2248** = 34
                              1420, finish @ 1440** = 20

Yesterday I spent a good deal of time reading the sample problem regarding the
monopolistic theatre owner. I also spent a little bit of time in the Simply
Scheme textbook (both yesterday and today).

Performed some directory and file housekeeping and made a commit to Github.

Best profit using this calculation is a ticket price of $2.90; profit $1064.10.

Identify constants in the sample problem (theatre scenario):

[15]:    +/- change in attendance with each +/- change in ticket price
[$0.10]: +/- change in ticket price
[120]:   baseline average attendance
[$180]:  fixed costs per performance
[$0.04]: variable expense cost per attendee

So, the code with constants looks like this:

(define BASELINE_TICKET_PRICE              5)
(define ATTENDANCE_CHANGE                 15)
(define TICKET_PRICE_CHANGE             0.10)
(define VAR_EXPENSE_PER_ATTENDEE        0.04)
(define AVERAGE_ATTENDANCE               120)
(define FIXED_EXPENSE_PER_PERFORMANCE    180)

(define (attendees ticket-price)
  (- AVERAGE_ATTENDANCE (* (- ticket-price BASELINE_TICKET_PRICE)
                           (/ ATTENDANCE_CHANGE TICKET_PRICE_CHANGE))))

(define (revenue ticket-price)
  (* ticket-price (attendees ticket-price)))

(define (cost ticket-price)
  (+ FIXED_EXPENSE_PER_PERFORMANCE (* VAR_EXPENSE_PER_ATTENDEE (attendees ticket-price))))

(define (profit ticket-price)
  (- (revenue ticket-price)
     (cost ticket-price)))

**===== 12/8 morning; start @ 0851, finish @ 0908** = 17

Feast of the Immaculate Conception! Thanks be to God for Our Lady, the Blessed
Virgin Mary! :-)

Section 2.2, Composing Functions. Slogan -- DEFINE ONE FUNCTION PER TASK.

I'll work through the sample problem with the movie theatre revenue/expense
conundrum.

(define (attendees ticket-price)
  (- 120 (* (- ticket-price 5.0) (/ 15 0.1))))

(define (revenue ticket-price)
  (* ticket-price (attendees ticket-price)))

(define (cost ticket-price)
  (+ 180 (* 0.04 (attendees ticket-price))))

(define (profit ticket-price)
  (- (revenue ticket-price)
     (cost ticket-price)))

**===== 12/7 morning; start @ 0621, finish @ 0700** = 49
                              1420, finish @ 1511** = 51
                              1520, finish @ 1531** = 11
                              1650, finish @ 1729** = 39
                              1830, finish @ 1850** = 20
                              2130, finish @ 2200** = 30

Pearl Harbor day.  A moment to remember those who lost their lives that day.

Once again, at the start, you bumbled on the basic function layout but here is
how it begins to develop:

Time to stop @ 0700. Wake up Mella and bring her to Mass with me this morning.

Finished exercise 21 and 22. Now there is a good deal of reading to do before
the next exercise. Much of the notes for today are in the exercises.

(define (cip x)
  (- 120 (* x (/ 15 0.1))))

(define (fixed-cost a)
  (+ 180 (* 0.04 a)))

**===== 12/6 morning; start @ 0602, finish @ 0628**

Up late again chatting with the wife, so a late start. Tired, groggy. Must
study! Must be a programmer some day! :-)

Exercise 20 is (yet again) taking a previous exercise and making a function out
of it.

To make the new string-join function work it's necessary to use a variable (in 
this case 'x') and pass a string of "_" to your new function. You bumbled with
this for 1-2 minutes.

Exercise 21 is next. I just read it and leaves me thinking that some good
concepts will be learned here. I'll definitely have to get to this tonight. I do
plan to share this one with Peter, though. Signing-off for now...

**===== 12/5 morning; start @ 0527, finish @ 0628**

Still on exercize 17. I may have overthought this because, in total, I spent
probably 45 minutes on it. I'll restate the problem and my proposed solution
here both are also contained in my exercise notes.

Ex 17: Define the function bool-imply. It consumes two Boolean values, call them
b1 and b2. The answer of the function is true if b1 is false or b2 is true.

(define B1 false)
(define B2 true)

(define (bool-imply x y)
   (or x y))
   
Exercise 18 went quickly; I took exercise 5 and made a function out of it.

Exercise 19 was similar in that I simply had to "build-up" exercise 10. I was
faced with that same problem of "how do you deal with three options with only
an 'if' statement?" I used a 'cond' for the three option solution.

**===== 12/4 morning; start @ 0529, finish @ 0629**

Start with exercise 16. You had to create two functions prior to creating the
third and final function that gives back the last character of any string taken
as input. This exercise further illustrates and strengthens the concept of
taking the output of one function and using it as input for another function.

Got a start on exercise 17 but must stop for work. Maybe we'll get back to this
tonight...

**===== 12/3 evening; start @ 2050, finish @ 2100**

I initially botched the cube function by using the sqr function only. See the
actual exercise file where there are two ways to write the cube *and* surface
functions.

See notes in exercise 15; you're using string-ith.

Leaving off at exercise 16.  Pick it back up tomorrow morning...

Start again at 2153; end at 2247, but watched Rush on YouTube for a bit. :-)

Long, crazy, mind-filling day.

**===== 12/2 morning; start @ 0554, finish @ 0633**

Starting on exercise 13 which refers back to the first exercise in this section.
The main lesson here is that one should use DrRacket's interaction area to 
develop expressions. Once the expression works properly, write the function 
header.

Exercise 14. See the notes within the actual exercise.

**===== 12/1 evening; start @ 2146, finish @ 2210**

Most of today I read the next section, "Functions and Programs". I experimented
a little (as the reading suggested) by entering some of the examples. I wrote
some notes on the paper I printed-out.
