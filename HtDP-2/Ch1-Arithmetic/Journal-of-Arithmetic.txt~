**===== 12/5 morning; start @ 0527, finish @ 0628**

Still on exercize 17. I may have overthought this because, in total, I spent
probably 45 minutes on it. I'll restate the problem and my proposed solution
here both are also contained in my exercise notes.

Ex 17: Define the function bool-imply. It consumes two Boolean values, call them
b1 and b2. The answer of the function is true if b1 is false or b2 is true.

(define B1 false)
(define B2 true)

(define (bool-imply x y)
   (or x y))
   
Exercise 18 went quickly; I took exercise 5 and made a function out of it.

Exercise 19 was similar in that I simply had to "build-up" exercise 10. I was
faced with that same problem of "how do you deal with three options with only
an 'if' statement?" I used a 'cond' for the three option solution.

**===== 12/4 morning; start @ 0529, finish @ 0629**

Start with exercise 16. You had to create two functions prior to creating the
third and final function that gives back the last character of any string taken
as input. This exercise further illustrates and strengthens the concept of
taking the output of one function and using it as input for another function.

Got a start on exercise 17 but must stop for work. Maybe we'll get back to this
tonight...

**===== 12/3 evening; start @ 2050, finish @ 2100**

I initially botched the cube function by using the sqr function only. See the
actual exercise file where there are two ways to write the cube *and* surface
functions.

See notes in exercise 15; you're using string-ith.

Leaving off at exercise 16.  Pick it back up tomorrow morning...

Start again at 2153; end at 2247, but watched Rush on YouTube for a bit. :-)

Long, crazy, mind-filling day.

**===== 12/2 morning; start @ 0554, finish @ 0633**

Starting on exercise 13 which refers back to the first exercise in this section.
The main lesson here is that one should use DrRacket's interaction area to 
develop expressions. Once the expression works properly, write the function 
header.

Exercise 14. See the notes within the actual exercise.

**===== 12/1 evening; start @ 2146, finish @ 2210**

Most of today I read the next section, "Functions and Programs". I experimented
a little (as the reading suggested) by entering some of the examples. I wrote
some notes on the paper I printed-out.

**===== 11/30 morning session; start @ 1644, finish @ 1744**

For exercise 10 it's necessary to use image-height and image-width and compare
them to determine if the image is tall or wide. I defined three functions:

(define cat ~)
(define cat-h (image-height cat))
(define cat-w (image-width cat))

This works fine with the following if statement:

(if (>= cat-h cat-w) "tall" "wide")

*But*, I haven't been able to successfully write the if statement by replacing
the cat-h and cat-w functions with their actual "meat" -- I keep getting errors.

Exercise 10 has a second part: create an expression that computes whether a
picture is "tall", "wide", or "square". Although they haven't discussed COND
statements, I used on to solve this problem.

(cond [(> cat-h cat-w) "tall"]
      [(> cat-w cat-h) "wide"]
      [else "square"])
      
This satisfies -- in a pale sort of way -- the exercise requirements, but what
if the image is a circle?
      
2235/start -- 2330/fin [55 mins.]

Worked on exercise 11. The first two parts of the problem are fairly easy but
the last part is harder, especially if I'm limited to using if statements. See 
my exercise 11 code for notes.

**===== 11/29 morning session; start @ 0729, finish @ 0757**

A good deal of narrative note taking exists within the answer file for exercise
9; be sure to have a look there. On to exercise 10 which is under the section
(1.6) title, "Mixing it Up With Booleans".

Notable concept and thought:

The word “if” is followed by three expressions, separated by blank spaces (that
includes tabs, line breaks, etc).

(define x 2)
(if (= x 0) 0 (/ 1 x))

The first expression is always evaluated; its result must be boolean.
  => in this case, FALSE.
  
If the result of the first expression is true, the 2nd expression is evaluated.
Otherwise the third expression.
  => in this case, the 3rd expression wins: (/ 1 2) = 0.5

0757 [38 mins.]: little footsteps in the house. Break.
2226/start -- 2310/fin [44 mins.]

**===== 11/28 evening session; start @ 2039, finish @ 2347**

Your journaling is now happening in both your exercise assignments and here. Get
in the habit of checking both places before starting your work.

The tree assignment only took a few minutes. You started by copying code from
the documentation -- overlay/offset. Notice how the authors used overlay/offset
in a nested way:

(overlay/offset
   (overlay/offset (circle 30 'solid (color 0 150 0 127))
                   26 0
                   (circle 30 'solid (color 0 150 0 127)))
   0 26
   (circle 30 'solid (color 0 150 0 127))))
   
They could have named one of the overlay/offsets to simplify things (at least,
that's how my mind is working right now).

You see that it can be easy for one to make a mistake with booleans. You came
back from the game and saw that one of your answers was incorrect.  Here's the
correct answer to the problem that you originally had answered incorrectly:

> (or b1 false)
true

2100: ready for exercise 9: stopping for Steelers/Ravens game. :-)
2147: halftime. Continue on to exercise 9.
2159: back to the game. Made progress on exercise 9.
2340: Ravens win 22-20. Crazy game.
2347: to bed. The wife is chatting...

Time to go to bed.

**===== 11/27 morning session; start @ 0630, finish @ 0800**

Wow! Did I really miss two days of studying?! Well, Shane and Katie were home
and the family had a great time together. Deo Gratias. It's a good thing I got
almost 3 hours of study time in on 11/22. :-)

Working on exercise #7 and taking notes within the exercise file.

Much more tinkering using functions with other functions -- very cool. I'm
beginning to sense a need to loop, though. For instance, what if I want my ship
to be on top of water? I played with putting four light blue circles together,
like so:

(define 2c
 (overlay/xy
   (circle 20 "solid" "lightblue")
   20 0
   (circle 20 "solid" "lightblue")))

(define 3c
  (overlay/xy 2c
    20 0
    2c))

(define 4c
  (overlay/xy 3c
    20 0
    3c))
    
Although it's fun to use one function to serve another, there is repetition here
that makes me believe there is a better way.

Time to pack it in -- Aaron's awake and it's 0800.

**===== 11/24 morning session; start @ 0530, finish @ 0640**

Shane and Katie are home!

Learning documentation takes time! It turns out that overlay/xy is not the
correct primitive. You searched on 'overlay' and noticed the 'above' primitive.

It gets better -- I recall thinking yesterday how I would compose the function
of "this function inside of that function inside of that function", but the
book showed me today to RECALL that you can name parts of your code as a 
function definition, like:

(define car-frame
(above (rectangle 30 10 "solid" "orange")
       (rectangle 50 15 "solid" "orange")))

(define wheels
  (beside (circle 8 "solid" "navy")
          (circle 8 "solid" "navy")))

(underlay/xy wheels
            -10 -20
            car-frame)

So, underlay the result from wheels on the result of car-frame. Cool!
            
Changing the value of -10 moves the wheels left-right.
Changing the value of -20 moves the wheels up-down.
       
This puts a new light on the concept of building upon functions.

There is 'overlay' and 'underlay' and building on functions. Completed exercise
#6 and now moving-on to #7.

**===== 11/23 morning session; start @ 0625, finish @ 0720**

Yesterday was great. I think I was able to get almost 3 hours of study time. I 
am also thanking myself for stopping the i2spd course and committing to this
book. Off to Mass this morning NLT 0740.

You went on a mad search to find a function that counted pixels when you should
have realized the concept to apply to meet the need. The cat image is contained
within a RECTANGLE. Just calculate the area of the rectangle and the number of 
pixels are within (since pixels are the unit measure of an image).

One thing this book is making me do that I didn't do in the MOOC is to get
familiar with the language DOCUMENTATION. It's interesting to note that I also
changed my work approach. I use Notepad++ to scratch important notes about the
exercise I'm working on, but the book inspired a different way approach to
programming than the MOOC did.

I need to make a very basic image of an automobile using knowledge of the 3
flavors of image primitives. Last night I tinkered but I missed some key
information in the book -- ANCHOR POINT. Slow down and read!

Anchor points relate to the 3rd kind of image primitive: functions that compose
images.

CONCEPT: each image is like a photograph, that is, aa rectangle of pixels and
one of these pixels is an implicit anchor point. When you use an image primitive
to compose two images, the composition happens with respect to the anchor
points, unless you specify some other point explicitly.

For static images...

<overlay> - uses CENTER as ANCHOR.
<overlay/xy> - ANCHOR with respect to image CENTER, shifts 2nd image by x
  pixels to the right and y pixels down.
<overlay/align> - accepts two strings that shift the anchor point(s) to other
  parts of the rectangles.
  
For image processing in the way of animated scenes & games..

<empty-scene>
<place-image>
<add-line>


**===== 11/22 evening session; start @ 1940, finish @ 2013**
                       again@; start @ 2100, finish @ 2230

Finished exercise #3, which really forced me to think hard about the order of
evaluation and the result. The answer is:

(string-append (string-append (substring str 0 i) "_") (substring str i 10))

Exercise #4 answer, or change i to any valid number place in the string.

(string-ith str i)

IMAGES -- 3 flavors of image primitive operations:
 1. Creation of basic images,
 2. Image properties (image-height & image-width), and
 3. Functions that compose images (overlay, place-image, add-line etc.)
 
Exercise #5: after adding the (define cat ~) line to the definitions area,
create an expression that counts the number of pixels in the image.

Left off on exercise #6.

**===== 11/22 morning session; start @ 0540, finish @ 0630**

Remember to save each of your exercise solutions as a Racket file in 
C:\Users\v2chrisb\Documents\GitHub\i2spd\HtDP-2\Ch1-Arithmetic.

This is exercise #3.

Add the following two lines to the definitions area:
 
(define str "helloworld")
(define i 5)

Then create an expression using string primitives that adds "_" at position i.
In general this means the resulting string is longer than the original one;
here the expected result is "hello_world".

**===== 11/21 morning session; start @ 0531, finish @ 0630**

Comments: remember that DrRacket counts from 0, not 1. This became apparent
again when you played with the string-ith function. Stopped @ 1.3 "Mixing It Up"

Ex 1: compute the distance of some specific Cartesian point (x,y) from the
origin (0,0).

(define x 3)
(define y 4)

(sqrt (+ (sqr x) (sqr y)))

Ex 2: use string primitives to create an expression that concatenates prefix and
suffix and adds "_" between them. When you run this program, you will see
"hello_world" in the interactions area.

(define prefix "hello")
(define suffix "world")

(string-append prefix "_" suffix)

**===== 11/20 morning session; start @ 0555, finish @ 0605**

Starting an entirely new journal on an entirely new course of study, that is,
I'm leaving the UBC course for awhile with the hope of strengthening my 
programming foundation here in the How to Design Programs 2 book.

Up really early this morning but had to spend a big chunk of time catching-up
from being on the road all day yesterday in RC (TAACCCT "GroundWorks").

I should be able to get to the arithmetic exercises this evening and I should
also be able to move through them at a fair clip. I don't, however, want to be
hasty with the material because I can already see there are some good concept
lessons here.
