**===== 11/27 morning session; start @ 0630, finish @ 0800**

Wow! Did I really miss two days of studying?! Well, Shane and Katie were home
and the family had a great time together. Deo Gratias. It's a good thing I got
almost 3 hours of study time in on 11/22. :-)

Working on exercise #7 and taking notes within the exercise file.

Much more tinkering with using functions with other functions -- very cool. I'm
beginning to sense a need to loop, though. For instance, what if I want my ship
to be on top of water? I played with putting four light blue circles together,
like so:

(define 2c
 (overlay/xy
   (circle 20 "solid" "lightblue")
   20 0
   (circle 20 "solid" "lightblue")))

(define 3c
  (overlay/xy 2c
    20 0
    2c))

(define 4c
  (overlay/xy 3c
    20 0
    3c))
    
Although it's fun to use one function to serve another, there is repetition here
that makes me believe there is a better way.

Time to pack it in -- Aaron's awake and it's 0800.

**===== 11/24 morning session; start @ 0530, finish @ 0640**

Shane and Katie are home!

Learning documentation takes time! It turns out that overlay/xy is not the
correct primitive. You searched on 'overlay' and noticed the 'above' primitive.

It gets better -- I recall thinking yesterday how I would compose the function
of "this function inside of that function inside of that function", but the
book showed me today to RECALL that you can name parts of your code as a 
function definition, like:

(define car-frame
(above (rectangle 30 10 "solid" "orange")
       (rectangle 50 15 "solid" "orange")))

(define wheels
  (beside (circle 8 "solid" "navy")
          (circle 8 "solid" "navy")))

(underlay/xy wheels
            -10 -20
            car-frame)

So, underlay the result from wheels on the result of car-frame. Cool!
            
Changing the value of -10 moves the wheels left-right.
Changing the value of -20 moves the wheels up-down.
       
This puts a new light on the concept of building upon functions.

There is 'overlay' and 'underlay' and building on functions. Completed exercise
#6 and now moving-on to #7.

**===== 11/23 morning session; start @ 0625, finish @ 0720**

Yesterday was great. I think I was able to get almost 3 hours of study time. I 
am also thanking myself for stopping the i2spd course and committing to this
book. Off to Mass this morning NLT 0740.

You went on a mad search to find a function that counted pixels when you should
have realized the concept to apply to meet the need. The cat image is contained
within a RECTANGLE. Just calculate the area of the rectangle and the number of 
pixels are within (since pixels are the unit measure of an image).

One thing this book is making me do that I didn't do in the MOOC is to get
familiar with the language DOCUMENTATION. It's interesting to note that I also
changed my work approach. I use Notepad++ to scratch important notes about the
exercise I'm working on, but the book inspired a different way approach to
programming than the MOOC did.

I need to make a very basic image of an automobile using knowledge of the 3
flavors of image primitives. Last night I tinkered but I missed some key
information in the book -- ANCHOR POINT. Slow down and read!

Anchor points relate to the 3rd kind of image primitive: functions that compose
images.

CONCEPT: each image is like a photograph, that is, aa rectangle of pixels and
one of these pixels is an implicit anchor point. When you use an image primitive
to compose two images, the composition happens with respect to the anchor
points, unless you specify some other point explicitly.

For static images...

<overlay> - uses CENTER as ANCHOR.
<overlay/xy> - ANCHOR with respect to image CENTER, shifts 2nd image by x
  pixels to the right and y pixels down.
<overlay/align> - accepts two strings that shift the anchor point(s) to other
  parts of the rectangles.
  
For image processing in the way of animated scenes & games..

<empty-scene>
<place-image>
<add-line>


**===== 11/22 evening session; start @ 1940, finish @ 2013**
                       again@; start @ 2100, finish @ 2230

Finished exercise #3, which really forced me to think hard about the order of
evaluation and the result. The answer is:

(string-append (string-append (substring str 0 i) "_") (substring str i 10))

Exercise #4 answer, or change i to any valid number place in the string.

(string-ith str i)

IMAGES -- 3 flavors of image primitive operations:
 1. Creation of basic images,
 2. Image properties (image-height & image-width), and
 3. Functions that compose images (overlay, place-image, add-line etc.)
 
Exercise #5: after adding the (define cat ~) line to the definitions area,
create an expression that counts the number of pixels in the image.

Left off on exercise #6.

**===== 11/22 morning session; start @ 0540, finish @ 0630**

Remember to save each of your exercise solutions as a Racket file in 
C:\Users\v2chrisb\Documents\GitHub\i2spd\HtDP-2\Ch1-Arithmetic.

This is exercise #3.

Add the following two lines to the definitions area:
 
(define str "helloworld")
(define i 5)

Then create an expression using string primitives that adds "_" at position i.
In general this means the resulting string is longer than the original one;
here the expected result is "hello_world".

**===== 11/21 morning session; start @ 0531, finish @ 0630**

Comments: remember that DrRacket counts from 0, not 1. This became apparent
again when you played with the string-ith function. Stopped @ 1.3 "Mixing It Up"

Ex 1: compute the distance of some specific Cartesian point (x,y) from the
origin (0,0).

(define x 3)
(define y 4)

(sqrt (+ (sqr x) (sqr y)))

Ex 2: use string primitives to create an expression that concatenates prefix and
suffix and adds "_" between them. When you run this program, you will see
"hello_world" in the interactions area.

(define prefix "hello")
(define suffix "world")

(string-append prefix "_" suffix)

**===== 11/20 morning session; start @ 0555, finish @ 0605**

Starting an entirely new journal on an entirely new course of study, that is,
I'm leaving the UBC course for awhile with the hope of strengthening my 
programming foundation here in the How to Design Programs 2 book.

Up really early this morning but had to spend a big chunk of time catching-up
from being on the road all day yesterday in RC (TAACCCT "GroundWorks").

I should be able to get to the arithmetic exercises this evening and I should
also be able to move through them at a fair clip. I don't, however, want to be
hasty with the material because I can already see there are some good concept
lessons here.
