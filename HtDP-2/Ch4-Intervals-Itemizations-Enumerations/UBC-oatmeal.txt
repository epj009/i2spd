;; *HtDD*: establish represent/interpret relation btwn info. & data
;
; PROBLEM (A): develop a system that will perfectly heat your breakfast
; oatmeal. You have a thermometer that you can stick into the oatmeal.
; It reads the temperature in whole degrees Celsius. You are very 
; particular about your oatmeal, and you consider 71 degrees to be "just
; right". Anything less is "too cold" and anything more is "too hot".
; Design a data definition to represent the possible oatmeal temperatures.
; Call it OatmealTemp.

;;; OatmealTemp is one of:
;; - Number[0, 70]
;; - Number[71]
;; - Number[72, 100]
; this is a mixed data itemization

; interp. the temperature of oatmeal
;;  Number[0, 70]   is too cold
;;  Number[71]      is proper temp
;;  Number[72, 100] is too hot


; PROBLEM (B): When you check the temperature of the oatmeal you can
; adjust the burner on the stove. You can either turn it up, turn it down,
; or leave it the same. Design a data definition to represent a stove
; adjustment. Call it Adjustment

;;; Adjustment is one of:
;; - "turn up"
;; - "leave same"
;; - "turn down"

; interp. the adjustment of the burner
;;  Number[0, 70]   "turn up"
;;  Number[71]      "leave same"
;;  Number[72, 100] "turn down"


;; Template for a one argument function
;(define (fn-for-oatmeal-temp ot)
; basic form
;  (cond [Q1 A1]
;        [Q2 A2]
;        [Q3 A3]))

; This passes muster in Dr. Racket
;(define (oat ot)
;  (cond [(and (number? ot) (<= 0 ot) (< ot 71)) (... ot)]
;        [(and (number? ot) (<= 72 ot)) (... ot)]
;        [else  (... ot)]))


;; Template rules used:
;;  - one of: 3 cases
;;  - atomic non-distinct: [0, 70]
;;  - atomic non-distinct: [71];
;;  - atomic non-distinct: [72, 100]


; *HtDF*: PROBLEM (C): Design a function that will consumes an oatmeal
; temperature and produces the proper stove adjustment based on that
; temperature. Call it oatmeal-temp-to-adjustment.


;; Signature
;; =========
;; (HtDP-2: express how info. will be represented as data)
;; OatmealTemp -> Adjustment


;; Purpose: (HtDP-2: what does the function compute?)
;; ==================================================
;; consume an OatmealTemp and produce an Adjustment


;; Stub; define examples; wrap each in a check-expect
;; ==================================================
;(define (oat ot) "leave same")           ;; Stub
;; given x, expect y                     ;; from HtDP-2
;; given a, expect b                     ;; from HtDP-2
(check-expect (oat 71) "leave same")



;; Inventory -- template & constants
;; =================================


;; Code the body; test & debug
;; ===========================
(define (oat ot)
  (cond [(and (number? ot) (<= 0 ot) (< ot 71)) ("turn up")]
        [(and (number? ot) (<= 72 ot)) ("turn down")]
        [else  ("leave same")]))
	
; Runs OK in Dr. Racket on 2/3/14	

; If a WISH LIST is needed, it should consist of 3 things:
; (1) a meaningful name for the function, (2) a signature,
; and (3) a purpose statement. See section 3.4 of HtDP-2.