**===== 01/17 morning; start @ 2215, finish @ 2235 = 20

Start back at 5:00 minutes in the video for review. Going now to spend time with
my wife. :-)

I have something that "works". It doesn't consider boundary cases and it's
only sketched-in, really. Let's revisit the problem statement carefully before
looking at the Professor's answer in detail (i.e., watch the videos)...

Recall the HtDD PROBLEM: design a system for controlling a New Year's Eve 
display. Design a data definition to represent the current state of the 
countdown, which falls into one of three categories: 
 - not yet started
 - from 10 to 1 seconds before midnight
 - complete (Happy New Year!)

Recall the HtDF PROBLEM: DESIGN a function called countdown->image that consumes
a Countdown and produces an image showing the current status of the countdown.

**===== 01/16 morning; start @ 0535, finish @ 0630 = 55

I think I learned that the abbreviation C.f -- used by Dr. K. -- means "see
also".

Hmmm -- things are sort of working. I found myself evaluating each section of 
the 'cond' using the REPL, which, I think, should be a good thing. I have
some working code, but I seem to have skipped the inventory of templates and
constants section of the HtDF recipe. Back at it later (or tomorrow).

Here are things as they stand now, and it works:

(define (countdown->image cd)
  (cond [(false? cd) (text "not" 12 "red")]
        [(and (< 0 cd) (< cd 10)) cd]
        [(= cd 0) (text "HNY" 16 "red")]))


**===== 01/15 morning; start @ 0558, finish @ 0633 = 35
              evening; start @ 1930, finish @ 2000 = 30

It is permissible to use 'else' for the last question for itemizations and large
enumerations. *Normal* enumerations should not use else. Hmmm.

Also, the point about "guarding" the cond question with an appropriate type
predicate (on the data driven templates page) is more relevant to me now and 
should be considered with this problem.

I have to stop at the examples/check-expects. Dr. Racket is OK with my stub
and examples.

Evening: this letter grade problem finished-up nicely and quickly. If they could
all go so smoothly! :-)

Started on countdown, which is going to be more difficult. Looked into the
itemization data definition type. Ran the solution file. Be mindful of the
'text' primitive.


**===== 01/14 morning; start @ 0615, finish @ 0645 = 30

Template rules were wrong; interp. was off, template was quite different. Here's
my "template for a one argument function" attempt:

;(define aisle? sn)
;   (cond [(aisle? sn) (... sn)]
;         [else
;           (...)]))

And here's Dr. K's:

(define (fn-for-seat-num sn)
  (... sn))
  
Prof. K. tested 3 cases where I tested two; he tested both TRUE conditions.

The final result was VERY different. I tried using a "cond" -- Prof. K. used an
"or" statement.

Wow -- lots of differences, and overall I feel like I really botched this one.
I've gone back a number of times and revisited my approach versus the Prof's.

  
**===== 01/13 morning; start @ 0610, finish @ 0645 = 35

From the UBC Data Driven Templates page, "in many cases the template for a
function is determined by the type of data the function consumes."

As far as the code I wrote today goes, Dr. Racket is hangs when processing it.
Look into the reason for this next time.


**===== 01/12 morning; start @ 0720, finish @ 0750** = 30

I have my work aligned so I'll get started. Worked on UBC HtDD L3 until NungPoo
awakened at 0750. Continue later...


**===== 01/11 morning; start @ 0625, finish @ 0720** = 55

I'm seeing and feeling the differences in approach between UBC and the text
a little more clearly now.  Dr. K. has us learning about data design and 
representing data in the second week, making us work with intervals,
itemizations and enumerations. The text introduces us to HtDW *then* chapter 4
has us learn about and use intervals, itemizations and enumerations.

I think the best approach will be to create a new folder in HtDP-2 for chapter 4
and work through data definitions with the UBC and HtDP-2 exercises. I'll
duplicate a part of these journal entries to start the notes for chapter 4.

Work list for 1/11/14:
======================

 + HtDD L3 (seat-num data definition) combined with...
  -> HtDD L6 (seat-num function).
 + HtDD L4 (letter-grade data definition) combined with...
  -> HtDD L7 (bump-up letter grade function).
 + HtDD L5 (countdown data definition) combined with...
  -> HtDD L8 (countdown-to-display function).
  
After these are complete, it may be beneficial to read and work through problems
in chapter 4 of the text, i.e exercises 46-48. Note that problem 49 starts
using worlds again in its exercises and examples.

From here it looks like a good approach may be:

 + go back and complete all of the UBC HtDD practice problems,
 + start and work through UBC HtDW videos and problems,
 + finish chapter 3 in the HtDP-2 text (HtDW), and finally,
 + finish chapter 4 in the HtDP-2 text, up to exercise 58.
 

**===== 01/10 evening; start @ 2050, finish @ 2135** = 45

Now, HtDD in UBC.  Doing the 'best city' exercise. You forgot how to test for
a string result, i.e.

(define (best? cn)
  (if (string=? "Denver" cn) 
      true
      false))


**===== 01/09 morning; start @ 0550, finish @ 0620** = 30

Jared! Pray for us little buddy! We love and miss you very much.

Start with the UBC "distance between two points" exercise, then start going
through how to design data exercises.  Here's the distance between two points
function:

(define (distance x1 y1 x2 y2)
   (sqrt (+ (sqr (- x2 x1)) (sqr (- y2 y1))))

The check-expect that uses (sqrt 2) for a result to be tested against complains
thus: check-expect cannot compare inexact numbers. Try (check-within test
1.4142135623730951 range).


**===== 01/08 morning; start @ 0535, finish @ 0615** = 40
                       start @ 1700, finish @ 1730** = 30

It's the day to clear your head after all of the turbulence at work. Learning to
program should be good for that! :-)

Ah-hah! When you count a string in Scheme you mark the place that you start
counting PRIOR TO the character, that is, for the word "brat",

0b1r2a3t4
.^.^.^.^.

Expanded, for readability,

0 b 1 r 2 a 3 t 4

Now, considering the substring command:

(substring s i j) => string
s : string
i : natural-number
j : natural-number

(substring "brat" 1 3) yields "ra"
(substring "brat" 1 4) yields "rat"

Don't forget to tinker in the REPL to assist when solving problems!

HtDP problem #33 wants the first character removed from a string, so the word
"brat" would become "rat". The 'string-length' function will return a number and
I want to use this number as one of the inputs to the 'substring' command. How
do I do this? Well, using the REPL, this returns the proper result:

(substring "brat" 1 (string-length "brat"))

So, replacing "brat" with a variable, the resulting function is:

(define (string-last s)
  (substring s 1 (string-length s)))
  
In the afternoon I completed exercise 34, string-remove-last. The function looks
like this:

(define (string-remove-last s)
   (substring s 0 (- (string-length s) 1)))