**===== 01/08 morning; start @ 0535, finish @ 0615** = 40

It's the day to clear your head after all of the turbulence at work. Learning to
program should be good for that! :-)

Ah-hah! When you count a string in Scheme you mark the place that you start
counting PRIOR TO the character, that is, for the word "brat",

0b1r2a3t4
.^.^.^.^.

Expanded, for readability,

0 b 1 r 2 a 3 t 4

Now, considering the substring command:

(substring s i j) => string
s : string
i : natural-number
j : natural-number

(substring "brat" 1 3) yields "ra"
(substring "brat" 1 4) yields "rat"

Don't forget to tinker in the REPL to assist when solving problems!

HtDP problem #33 wants the first character removed from a string, so the word
"brat" would become "rat". The 'string-length' function will return a number and
I want to use this number as one of the inputs to the 'substring' command. How
do I do this? Well, using the REPL, this returns the proper result:

(substring "brat" 1 (string-length "brat"))

So, replacing "brat" with a variable, the resulting function is:

(define (string-last s)
  (substring s 1 (string-length s)))


**===== 01/07 morning; start @ 0600, finish @ 0640** = 40

Geoff was fired yesterday. I study with sadness and offer my prayers for him,
his wife, and for our President. I pray God will help me not become bitter
toward Phil Conroy, rather, that I offer prayers for him and his wife.

Completed exercise 32 in HtDP, image area.


**===== 01/06 morning; start @ 0650, finish @ 0735** = 45

Did the string-last problem from HtDP-2 again. The big re-lesson here is that
the 'string-ith' function counts from zero.

(define (string-last s)
    (string-ith s (- (string-length s) 1)))


**===== 01/05 morning; start @ 0745, finish @ 0815** = 30
              evening; start @ 2110, finish @ 2140** = 30

It was tricky to get the 'if' statement working properly with image-height and
image-width. Now that the function is at least working, it's time to revisit the
DESIGN of this tall function.

UBC-tall.txt is complete; code is tested in Dr. Racket.
UBC-less-than-5.txt is complete.
Ex30_StringFirst-R1.txt is complete.


**===== 01/04 morning; start @ 0700, finish @ 0745** = 45
                       start @ 1040, finish @ 1110** = 30

Design is the process of going from a poorly formed problem to a well structured
solution.  Making the problem more specific is part of the design process.

Code coverage and boundary cases are introduced here.

PROBLEM: design a function that consumes an image and determines whether the
image is tall.

At your first glance of this problem you didn't even think BOOLEAN.

The proper number of tests for each function is something that will become more
and more important as the problems increase in difficulty.

There is a case in this problem when an image can be tall or not tall, so Dr. K
discusses the 'if' statement and structures his starter code thus:

(define (tall? img)
   (if (... img)      ; condition being checked
   (if (... img)      ; if true, execute code that's here
   (if (... img)))    ; else, do this
   
Dr. K. says:  we might have to use img in the question and the answers of the
'if' -- that's why we copy it three times. Example 'if' from UBC ref. docs.:

(if (> (string-length x) 3)
    "long"
    "short")
    
||-- Then, tweaked and tested as a simple example in Dr. Racket (which runs):

(define (bigger? x)
  (if (> x 3)
      "bigger"
      "smaller"))
      
||-- This function runs.

(require 2htdp/image)

(define (tall? img)
    (if (< (image-width img) (image-height img))
        "tall"
        "short"))



**===== 01/03 evening; start @ 2125, finish @ 2155** = 30

Watched the area-starter video. Completed the 'area of a square' exercise and
successfully tested and ran it in DrRacket.

Completed the UBC area of an image exercise.


**===== 01/02 morning; start @ 0515, finish @ 0625** = 70

Note: I also went through the yell-starter video. There are good quiz questions
at the end!

So, the HtDF-2 text, in section 3.1.1 "The Process", is talking about the UBC
"how to design functions" (HtDF) recipe. You were trying to align this section
of the text with the UBC "how to design data" (HtDD) recipe back on 12/29.

I changed the SPD-Template.txt file in my GitHub repository to reflect some
subtle differences I picked-up while watching the "HtDF, full speed" video this
morning.  Here's the example, in full:

;; Problem: consume a number and produce twice that number.
;; Call your function double.

;; *HtDF*
;; Signature
;; =========
;; Number -> Number


;; Purpose
;; =======
;; produce 2 times a given number


;; Stub; define examples; wrap each in a check-expect
;; ==================================================
#;(define (double n) 0)

(check-expect (double 3) 6)
(check-expect (double 4.2) 8.4)


;; Inventory -- template & constants
;; =================================
#;(define (double n)
  (...n))

;; Code the body; test & debug
;; ===========================
(define (double n)
  (* 2 n))


**===== 01/01 evening; start @ 2130, finish @ 2135** = 05

This is really a cheat. It's a feast day in the Church and I'm zoned-in on Arch
Linux right now. I'm not going to code today -- I'm taking the day off from
reading or doing anything with HtDP, however, tomorrow morning I'll be at it
bright and early. It's time to get back to the regular routing.

I did read about Lambda Calculus for 15 minutes earlier today so this isn't a
complete cheat entry. :-)

Thanks be to God for this day where we remember Our Lady and the special place
she holds in heaven as the Mother of God! Holy Mary, Mother of God, pray for us
now and at the hour of our death.


**===== 12/31 evening; start @ 2030, finish @ 2145** = 75

Watched the week2-1 video (cond expressions); week2-2 (data definitions);
week2-3 (HtDD, atomic non-distinct); week2-4 (HtDF w/non-primitive data);
week2-5 (structure of data orthogonality); week1-8 *(function definitions).


**===== 12/30 afternoon; start @ 1500, finish @ 1530** = 30

Sick as a dog! I still did a good 1/2 hour of reading today and decided that
it's a good time to maybe go back and revisit the UBC videos. The text seems to
be mixing the design of functions and data into one soup yet Dr. K consciously
separated them. I will attempt to find a process that works for me, and once I
do, I'll do the text problems using this process. It would probably be good to
also do the UBC homework files again. I need to spend time coding -- I've been
doing an awful lot of reading lately.


**===== 12/29 morning; start @ 0720, finish @ 0755** = 35

Retrieved data definition steps from Dr. K's class. Looking over my old notes
proved helpful. The pace of the UBC course is much faster than the book. I think
the two will complement each other as I move forward.

Here are the steps and points made by Dr. K regarding data definitions, which I 
referred to as HtDD:

1. Start with information.
  a. Determine the information's *structure* to know the type of data definition
     to use:
   (1). simple atomic
   (2). interval
   (3). enumeration
   (4). itemization
   (5). compound data
   (6). self or mutually referential
  b. Information structure drives template structures and assists determining
     function examples (a.k.a. check-expects).
2. Structure definition (used with compound data only).
3. A type comment that defines the new type & describes how to form data for 
   this new type.
4. An interpretation describing the correspondence between information & data.
5. One or more examples of data.
6. A template for a one argument function operating on data of this type.

Moving on, the basic Dr. Kiczales/UBC steps for HtDF:

1. Signature.
2. Purpose.
3. Stub. Define examples. Wrap each in a check-expect.
4. Template & inventory.


**===== 12/28 morning; start @ 0500, finish @ 0530** = 30


Created a new _ExSKEL_Process.txt file that outlines the process shown in the
text. Also see the link for deriving celsius to fahrenheit below.


**===== 12/27 evening; start @ 2220, finish @ 2250** = 30

Spent a good deal of time today putzing-around with ArchLinux, which is great
fun. I am on vacation, after all, so I'm tinkering with Linux.

Exercise 15 was about *defining* -- this exercise is about *DESIGNING*.

Look at this again tomorrow and see what other thoughts you have. See the code
and notes in exercise #30.


**===== 12/26 afternoon; start @ 1800, finish @ 1900** = 60

The Process (using F to C conversion as an example).

1. Express how information will be represented as data.
      -> e.g. use plain numbers to represent temperatures.
2. Function signature, purpose statement, and function header.
    => Signature: how many inputs the function consumes.
      -> e.g. Number -> Number
    => Purpose: what does the function compute?
      -> e.g. calculate C given a number that represents F
    => Header/stub: a simplistic function definition.
3. Illustrate the signature & purpose with some functional examples.
    => pick one piece of data from each input class from the signature and
       determine what you expect back.
; Number -> Number
; compute C given F
; given 32, expect 0
; given 212; 100
(define (f2c f c) 0))
4. Take inventory; understand the givens and what's needed to compute.
5. Code; replace the body of the function with an expression that attempts to
   compute from the pieces in the template what the purpose statement promises.
6. Test the function.

REFERENCE: Deriving the Celsius-to-Fahrenheit Conversion Formula
http://mathforum.org/library/drmath/view/58472.html


**===== 12/25 evening; start @ 2245, finish @ 2300** = 15

Christmas! Spent time today taking a step back from programming and setting-up
Arch Linux. Very cool, very fun. Needed the distraction but also need to get
back to programming tomorrow.


**===== 12/24 afternoon; start @ 1500, finish @ 1600** = 60

Christmas Eve! Thanks be to God for sending His only-begotten Son, our Lord and
Savior Jesus Christ, to save us from ourselves (for those who make the choice).
God is good. Thank you, Lord, for the gift of your Son, the gift of my family,
and the gift of life. May I be a faithful servant to You.

More reading. Getting ready for the upcoming exercises.

(1) Program design must clearly start with the connection between information
and data.

(2) The key is to know how to go from numbers as information to numbers as data
and vice versa.

Spent casual time this afternoon reading. Also tinkering with ArchLinux. I will
commit now to be sure I don't miss a day. :-)


**===== 12/23 evening; start @ 2150, finish @ 2330** = 100

Spent an hour throughout the day reading my journal notes from yesterday and
chapter 3 materials.

For the first time in awhile I watched Professor K. talk about data defs. I
watched videos #2 and #3 in week-2.


**===== 12/22 morning; start @ 0655, finish @ 0750** = 55
                               1200, finish @ 1400** = 120

*Note: I spent an easy 2 hours today reading the new material and taking notes.

Chapter 3! Emacs! New tools, new chapter, new information to learn! :-)

I just created a PDF of this section, i.e. "Section I: Fixed-Size Data", and it
is 131 pages. Chapter 3 begins on page 32; exercises 30 through 34 appear on
page 40.

Although this is material that Dr. Kiczales covered in the UBC MOOC, it's
presented in a different way and with a different pace here. Onward!

Programmers need a language, a notation for communicating what we wish to
compute. We need to learn the vocabulary of the programming language, to figure
out its grammar, and to understand that its "phrases" mean. We also need to:

+ learn how to get FROM a problem statement TO a program,
+ determine what is relevant in the problem statement and what can be ignored,
+ tease-out what the program consumes,
+ what it produces,
+ and how it relates to inputs to outputs.

Now on 3.1 "Designing Functions".

The purpose of a program is to describe the computational process of working
through information and producing new information. BSL and DrRacket are used
so the student does *not* have to worry about the translation of information
into data.

Footsteps...time to stop for now.

<-- START Sunday evening, 12/22 -->

Some of the main points of my readings today: I'll journal these points with
the hope that they'll "stick" in my old brain a little better.

(+) the purpose of a program is to describe a computational process of working
through information & producing new information.

(+) the information that comes from a part of the real world is called the
program's DOMAIN

(+) information plays a central role; think of information as facts about a
program's DOMAIN

(+) INFO -> PROCESSING -> DATA & VALUES -> PROCESSING -> INFO

(+) MVC = model, view, control: separate data processing from parsing info.

(+) it's critical to learn how to get from a problem statement to a program.

(+) a good program comes with a short write-up that explains
     -> what it does,
     -> what inputs it expects
     -> what it produces

(+) organize your programs around the problem's data

(+) a class is a collection of data, like a mathematical set

(+) a value is an element of a class

<-- END Sunday evening, 12/22 -->


**===== 12/21 evening; start @ 2115, finish @ 2200** = 45

<== REFERENCE: end of chapter 2 ==>
<== this is also found in the chapter 2 notes ==>

Still reading the end of chapter 2. I will definitely finish chapter 2 today and
move on to chapter 3. You left off at this:  in this case, number->square is the
clause being discussed. Now we're going to create a new clause for dealing with
key events and name it 'reset'.

(define (reset s ke)
  100)

This function is a bit puzzling and the text has to say of it, "this function
throws away its arguments and returns 100, which is the initial state of the 
big-bang expression we wish to modify." Why/how does it throw away its argu-
ments, i.e what it is the technical reason it throws away its agruments?

The 'on-key' function calls 'reset' when a key event occurs. The 'reset'
function takes the current value of 's' as its first argument and 'ke' as its
second argument. What is, and where does, the 'ke' variable come from?

OK. So I ran the 'reset' function manually and passed it two arguments. I passed
in strings, numbers and booleans, and no matter what you give 'reset' as its
two arguments, it always returns 100. A little less puzzling but I'm still not
entirely clear on this, but clear enough to move on in the text.

In order to understand the evaluation of big-bang expressions in general, let us
look at a schematic one: 

(big-bang cw0
          (on-tick tock)
          (on-key ke-h)
          (on-mouse me-h)
          (to-draw render)
          (stop-when end?)
          ...)

Figure 7, How the World Works, is helpful. Look at it again if confused. Now, 
the first interactive program:

(require 2htdp/universe)
(require 2htdp/image)

(define (main y)
  (big-bang y
            [on-tick sub1]
            [stop-when zero?]
            [to-draw place-dot-at]
            [on-key stop]))
 
(define (place-dot-at y)
  (place-image (circle 3 "solid" "red") 50 y (empty-scene 100 100)))
 
(define (stop y ke)
  0)
  
End of chapter 2. I know I'll be revisiting these examples again. I'll copy this
day's work into the week 3, for reference.
