;; PROBLEM: DESIGN a function called *distance*.

;Use the How to Design Functions (HtDF) recipe to design a
;function called distance that consumes four numbers representing
;two points and produces the distance between the two points.

;Use (distance 3 0 0 4), which should produce 5 as your first
;example/test. Once your function works with that test, try
;(distance 1 0 0 1) which should produce (sqrt 2). Read the error
;message carefully and use the help desk to figure out how to use 
;check-within for this case.

;The template for such a function is:

; (define (distance x1 y1 x2 y2)
;   (... x1 y1 x2 y2))

;; *HtDF*
;; Signature
;; =========
;; (HtDP-2: express how info. will be represented as data)
;; Number Number Number Number -> Number

;; Purpose: (HtDP-2: what does the function compute?)
;; ==================================================
;; consume four numbers that represent two X, Y coordinates and
;; produce one number that represents the distance between the
;; two points.



;; Stub; define examples; wrap each in a check-expect
;; ==================================================
;;(define (distance x1 y1 x2 y2) 0)      ;; Stub
;; given 3 0 0 4, expect 5               ;; from HtDP-2
;; given 1 0 0 1, expect sqrt 2          ;; from HtDP-2
(check-expect (distance 3 0 0 4) 5)
;(check-expect (distance 1 0 0 1) (sqrt 2))



;; Inventory -- template & constants
;; =================================
; (define (distance x1 y1 x2 y2)
;   (... x1 y1 x2 y2))


;; Code the body; test & debug
;; ===========================
(define (distance x1 y1 x2 y2)
   (sqrt (+ (sqr (- x2 x1)) (sqr (- y2 y1))))
   
; Tested OK in Dr. Racket on 1/9/14. The check-expect that uses
; (sqrt 2) for a result to be tested against complains thus:
; check-expect cannot compare inexact numbers. Try 
; (check-within test 1.4142135623730951 range).