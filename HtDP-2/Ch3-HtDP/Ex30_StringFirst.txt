Exercise 30: *Design* the function string-first, which extracts the first character from a non-empty string. Donâ€™t worry about empty strings.


==DOCUMENTATION LESSONS==
string-ith
=========================


==THOUGHTS==
Exercise 15 was about *defining* -- this exercise is about *DESIGNING*.
Here is the answer I wrote for exercise 15:

(define (string-first x)
  (string-ith x 0))
  
When I looked at it again after 23 days passed, I noticed right away that documentation (in the form of comments) is sorely lacking.
============


==THE PROCESS==

1. Express how information will be represented as data.
  => first thought, information consumed is a string, e.g. "plob"
  => this string will be represented as the only piece of data operated on
  => use strings to extract their first character
  
2. Function signature, purpose statement, and function header.



<<=CODE==>> My response:
;; strings will be represented as strings
;; Signature: String -> String
;; Purpose: the first character of the string will be extracted
;; Functional examples follow:
;;   given "plob", expect "p"
;;   given "joe", expect "j"
;;  (define (string-first s) 0)
;; Note: string-ith extracts the ith 1-letter substring from s.
;; Inventory: a string and the place value of the character being extracted, in this case, the first character (which is position 0).