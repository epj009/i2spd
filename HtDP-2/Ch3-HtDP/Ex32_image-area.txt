;; PROBLEM: DESIGN a function called image-pixels that consumes
;; an image and produces the area of that image. For the area it
;; is sufficient to just multiple the image's width by its height.
;; Follow the HtDF recipe and leave behind commented out versions
;; of the stub and template.

(require 2htdp/image)

;; *HtDF*
;; Signature
;; =========
;; (HtDP-2: express how info. will be represented as data)
;; Image -> Number


;; Purpose: (HtDP-2: what does the function compute?)
;; ==================================================
;; consume an image and produce the area of that image.


;; Stub; define examples; wrap each in a check-expect
;; ==================================================
;;(define (image-pixels w h) 0)            ;; Stub
;; given 2 3, expect 6                     ;; from HtDP-2
;; given 9 4, expect 36                    ;; from HtDP-2

; use a constant to lessen the typing burden
(define IMG (rectangle 30 50 "solid" "red"))

(check-expect (image-pixels IMG IMG)
        (* (image-height IMG) (image-width IMG)))

; this check-expect had to be adjusted as the function
; was refined



;; Inventory -- template & constants
;; =================================
;(define (image-pixels w h)                ;; Template
;   (... w h))                             ;; copy this template for coding


;; Code the body; test & debug
;; ===========================
;; need image-height and image-width

(define (image-pixels h w)
   (* (image-height h) (image-width w)))

; run with (image-pixels IMG IMG)
; at first you had variable order mixed-up, i.e.
; in the function definition the order of the variables
; was w h, and in the calculation the order was h w.