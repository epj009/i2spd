**UBC Data Definition Steps**
=============================

1. Start with information.
  a. Determine the information's *structure* to know the type of data definition
     to use:
   (1). simple atomic
   (2). interval
   (3). enumeration
   (4). itemization
   (5). compound data
   (6). self or mutually referential
  b. Information structure drives template structures and assists determining
     function examples (a.k.a. check-expects).
2. Structure definition (used with compound data only).
3. A type comment that defines the new type & describes how to form data for 
   this new type.
4. An interpretation describing the correspondence between information & data.
5. One or more examples of data.
6. A template for a one argument function operating on data of this type.


**HtDP Chapter 3 Process (using F to C conversion as an example)**
==================================================================

1. Express how information will be represented as data.
      -> e.g. use plain numbers to represent temperatures.
2. Function signature, purpose statement, and function header.
    => Signature: how many inputs the function consumes.
      -> e.g. Number -> Number
    => Purpose: what does the function compute?
      -> e.g. calculate C given a number that represents F
    => Header/stub: a simplistic function definition.
3. Illustrate the signature & purpose with some functional examples.
    => pick one piece of data from each input class from the signature and
       determine what you expect back.
; Number -> Number
; compute C given F
; given 32, expect 0
; given 212; 100
(define (f2c f c) 0))
4. Take inventory; understand the givens and what's needed to compute.
5. Code; replace the body of the function with an expression that attempts to
   compute from the pieces in the template what the purpose statement promises.
6. Test the function.
