(require 2htdp/image)
(require 2htdp/universe)

;; Display the current mouse position, at the mouse position.

;; == CONSTANTS ==

(define WIDTH  400)
(define HEIGHT 400)

(define TEXT-SIZE 15)
(define TEXT-COLOR "blue")

(define MTS (empty-scene WIDTH HEIGHT))

;; == DATA DEFINITIONS ==

(define-struct position (x y))
;; Position is (make-position Integer Integer)
;; interp. position of mouse in pixels

(define P1 (make-position 0 0))          ; upper right
(define P2 (make-position WIDTH HEIGHT)) ; lower right
#;
(define (fn-for-position)
  (... (position-x p)   ;Integer
       (position-y p))) ;Integer

;; Template rules used:
;;   -compound: 2 fields

;; == FUNCTIONS ==

;; Position -> Position
;; called to start the mouse tracker, call with (main (make-position 0 0))
;; no tests for main function

(define (main p)
  (big-bang p
            (to-draw  render)          ; Position -> Image
		    (on-mouse handle-mouse)))  ; Position MouseEvent -> Position

;; Position -> Image
;; render current position at the position itself
;; render -- in this case -- means to translate the number of the x y coords.
;; to their equivalent strings and enclose them with parenthesis, e.g. (110, 33)

(check-expect (render (make-position 110 33))
              (place-image (text "(110, 33)" TEXT-SIZE TEXT-COLOR) 110 33 MTS))

; (define (render c) MTS)  ;Stub

(define (render p)
   (place-image (text (string-append "("
                                     (number->string (position-x p))
									 ", "
									 (number->string (position-y p))
									 ")")
							TEXT-SIZE
							TEXT-COLOR)
						(position-x p)
						(position-y p)
						MTS))

;; Position MouseEvent -> Position
;; changes current position world state to current mouse position
;; ah! the comment above is saying that Position is the *current* world state,
;; that is, the current WS that we start with. So, the Position world state is 
;; composed (my own use of the word) with MouseEvent to create a new WS with the
;; name Position. The WS of Position is transformed: it starts in one state and
;; is composed with something else to make a new form of itself.

(check-expect (handle-mouse (make-position 20 30) 3 4 "button-down")
  (make-position 20 30))
  
(check-expect (handle-mouse (make-position 20 30) 3 4 "move")
  (make-position 3 4))
  
; (define handle-mouse p me) p) ; Stub

;<template according to MouseEvent>

(define (handle-mouse p x y me)
  (cond [(mouse=? me "move") (make-position x y)]
        [else p]))