Week-3b: Compound.  Important notes to self go here at the top. 

**===== 11/17 morning session; start @ 0647, finish @ 0738**

I didn't get to studying yesterday partly because I spent an hour putting
together another writing assigment for my niece. It's OK -- press on!

I'm in the "One More Definition" section of the Prologue where the author(s)
speak of deceleration.  A text editor is bit clunky for this, but:

d(t) = v * t - 1/2 * a * t^2

That is, if v is the speed of the object and a is the deceleration -- change of
speed -- then the object travels d miles (or meters or pixels or whatever) in
t seconds.

Using function notation tells everyone immediately that the computation of d
depends on t and that v and a are constants.

This line from the text jumped out at you!  With regard to changing our 
program's input -- currently height -- to time, and considering that the animate
function actually applies its functions to the number of clock ticks that have
passed since it was first called and not the height of the rocket image,
CLEARLY t -- short for time -- would be much better than height. Now, on to the
line that jumped out at you:

[T]his small change to the definition also clarifies that this program doesn’t
compute how far the rocket has traveled in the given time; it uses the time as
if it were a distance.

There's a concept for you! Thanks again to Peter. :-)

Stopping here because I hear little footsteps in the house. With any luck I'll
get to this again later today.

**===== 11/15 morning session; start @ 0425, finish @ 0542**

Peter made an interesting comment yesterday, i.e. in his teaching experience he
notes that students struggle with grasping the *concept* at hand. Many seem
to get the literal sense of the topic at hand but struggle with the concept.
I'd say I do the same. I'll try to be mindful of this going forward, and with
any luck, it could change some of the ways in which I approach problems.

Another quick little note: I just saw the UBC course graphic in a different
light this morning. The graphic shows INFORMATION --> DATA and under the arrow
from information to data is the word STRUCTURE. This is a core concept in the
course and was first introduced back in week 2, "How to Design Data". Hey!
Look at that! You picked-up on a concept, and really, not by looking for one
consciuosly.

OK -- I loaded the code snippet below, inserted the rocket image where the three
tildes are, and now the rocket stops 1/3 of the way down the scene. Find out
why.

When you change the constant SHEIGHT from 300 to 100 the rocket stops where it's
supposed to in the scene.

I copied the code from the book, changed the scene height from 100 to 300, and
the same thing happens. Yesterday it worked fine! What's going on?

Aha! :-) Happy moment...

Look at your code sample below and notice that the constant definition for RTG
uses a constant of 100, and as such, the rocket touches ground at y equals 100
minus image-height. Change the constant 100 to SHEIGHT and you're all set. :-)

The lesson speaks of constants, which I'm comfortable with. However one 
constant I didn't pick-up that I should have is the rocket image itself. Note
how your code has three rocket images? Why not use only one image with a ROCKET
constant? I'll do that now, i.e. I'm adding the constant to the code below and
removing the instances where I used three tildes ~~~ as the image placeholder.

Another concept note: you were looking at the variable 'height' with a bit of
a confused eyeball when you started anew in the code this morning. This variable
is used for instantaneous position of the ROCKET.

NOTE: the code below was refactored a number of times this morning *and* you
just renamed the function crs5 from crs3.

OK -- I have to stop now and spend some time on Mariah's essay. Start next
study session at "One More Definition", which speaks to deceleration.

**===== 11/14 morning session; start @ 0536, finish @ 0623**

Images have a center point and, when place-image adds an image to a scene, it
uses this center point as if it were the image which explains why the rocket
image is halfway "underground" when the scene animation stops.

The function image-height can be used; image-height is like + is to numbers.

NOTE: the 3-tildes (~~~) in the following example are a placeholder for the
actual image used in the code. This code works by substituting the rocket image
everywhere you encounter (~~~): <changed on 11/15 when ROCKET is made constant>
Now there is only one instance of ~~~ in this code that will need to be changed
when loading it into DrRacket.

(require 2htdp/image)
(require 2htdp/universe)

(define ROCKET .)
(define ROCKET-X 50)  ;; 50 was a magic number so we give it a constant
(define SHEIGHT 300)  ;; SHEIGHT stands for scene height

(define SWIDTH  100)  ;; SWIDTH stands for scene width 
(define MTS (empty-scene SWIDTH SHEIGHT))

(define RTG (- SHEIGHT (/ (image-height ROCKET) 2)))
                      ;; RTG is an acronym for RocketTouchesGround

(define (crs5 height)
  (cond
    [(<= height RTG)  ;; rocket's instantaneous height is less than
                      ;; or equal to the rocket touching the ground
     (place-image ROCKET ROCKET-X height MTS)]
    [(> height RTG)   ;; rocket's instaneous height is greater than
                      ;; the point of the rocket touching the ground
     (place-image ROCKET ROCKET-X RTG MTS)]))
     
Start your next study session at the "One Program, Many Definitions" section of
the Prologue.

**===== 11/13 evening session; start @ 2210, finish @ 2233**

I wasn't able to study this morning so here I am at 2210. This morning I did,
however, spend 15 minutes in a Precalculus book looking at the "Functions"
chapter. My hope is to get at least 15-30 minutes a day to touch mathematics.

Read about using the image-height function. Pick-up here tomorrow.

**===== 11/12 morning session; start @ 0507, finish @ 0626**

Starting the day by reading "Inputs and Output" in the HtDP-2 Prologue.

Here is what you learned in this section. Functions are useful because they can
process lots of data in a short time. You can launch a function by hand on a few
select inputs to ensure it produces the proper outputs. This is called testing a
function. Or, DrRacket can launch a function on lots of inputs with the help of
some libraries; when you do that, you are running the function. Naturally,
DrRacket can launch functions when you press a key on your keyboard or when you
manipulate the mouse of your computer. Whatever triggers a function application
isn’t important, but do keep in mind that (simple) programs are just functions.

Now reading the next section, "Many Ways to Compute".

(require 2htdp/image)
(require 2htdp/universe)

(define (create-rocket-scene-v2 height)
  (cond
    [(<= height 100)
     (place-image . 50 height (empty-scene 100 100))]
    
    [(> height 100)
     (place-image . 50 100 (empty-scene 100 100))]))
     
In the last part of the condition clause notice that rather than using the 
height variable the y-coordinate is set to 100. Because of this, the image can't
pass y=100 in the scene.

Packing it in for this morning. You left off in the Prologue at Figure 1:
Landing a rocket (version 2).

**===== 11/11 morning session; start @ 0528, finish @ 0628**

The blade of grass is back! I'm moving-on from the mouse tracker aasignment to
the one that started it all -- the one that made me stop and go back to the
beginning of this course and start over (which is when I also started to keep
my daily journal). My first journal notes were on 10/12/13, almost one month
ago! Recall that the course started on 9/4/13. You've been at this for over two
solid months!  Overall I think it was a good idea to stop in mid-October and 
re-do all of the work and revisit many of the lessons.

I've come to realize that I probably won't get to a place where I believe I've
achieved competency with the course material for quite awhile. I know I'll still
be working on this course well into the spring and summer of 2014, but I also
plan to manage the ratio of time spent on this (HtDP) and a couple of math
courses *(Coursera & EdX). I won't consider myself indoctrinated into the world
of software -- even at a very primitive level -- until this entire course is
"under my belt" and I feel confident with the subject matter.

Per the HtDW recipe, I have a sketch for "growing-grass" that shows preliminary
constant, changing and big-bang stages of the program.

For your next study session, first thing, go back and read the section entitled,
"Many Ways to Compute" in the HtDP-2 Prologue (which can be found here):

http://www.ccs.neu.edu/home/matthias/HtDP2e/part_prologue.html

**===== 11/10 morning session; start @ 0624, finish @ 0752**

Yesterday was good in a couple of ways. The notes for my study of HtDP were of 
a type that was better than normal *and* during the day I decided to stay away
from the computer and open a math book (Precalc: Functions). I want to allot
< 30 minutes a day, consistently, to review with the thought that I can solve
select word problems from my math text with Racket.

QUIZZES: for some (good) reason I decided to think about taking some quizzes
this morning to 1) test my understanding to a certain point and 2) to get them
recorded/saved for future use.

PROJECTS: I need to save the assignments for the peer graded projects, too, so
I did that this morning.

Nung Poo is awake so the studying stops. Not much in the way of content this
morning but I did take two quizzes (HtDW and Compound) and did well on both.

**===== 11/9 morning session; start @ 0544, finish @ 0714**

So, have a look at this code:

(define (render p)
   (place-image (text (string-append "("
                                      (number->string (position-x p))
                                      ", "
                                      (number->string (position-y p))
                                       ")")
                                       
                            TEXT-SIZE
                            TEXT-COLOR)
                        (position-x p)
                        (position-y p)
                         MTS))
                         
Note the line with the number->string; note that you hadn't seen this before
nor would you have known -- without checking the answer or perhaps talking to
your classmates -- about this BSL pre-defined function.

Some more interesting pre-defined functions from section 1.4 of the BSL notes:

gcd, imag-part, inexact->exact, e (Euler's number)

My approach with these more difficult world and compound problems has been to
say to myself, "work on this problem without looking at the solution to see if
you can do it on your own." I don't think this is working because there is yet
more instruction buried in the solution files.

Again, looking at the code above, there is another lesson in the use of the
place-image (section 2.3.4 in the HtDP/2e Teachpack documentation) pre-defined
function. This is a much more complex use of place-image than I've seen to date
and it's a good example from which to learn.

The lesson here -- from yet another angle -- is that to learn a language one
must spend time in the documentation and in the actual code to learn the myriad
of ways and approaches possible to solve the problem at hand.

Below are notes I made in my REType exercise text file.

;; Position MouseEvent -> Position
;; changes current position world state to current mouse position
;; ah! the comment above is saying that Position is the *current* world state,
;; that is, the current WS that we start with. So, the Position world state is 
;; composed (my own use of the word) with MouseEvent to create a new WS with the
;; name Position. The WS of Position is transformed: it starts in one state and
;; is composed with something else to make a new form of itself.

There is something going on here that I need to really understand. MouseEvent is
part of the HtDP/2e Teachpack "universe.rkt" and Position is the compound data
structure we created in the data definitions, i.e.

(define-struct position (x y))

We use this 'position' compound data structure in the signature, purpose and
stub section of our function section, like so:

Position -> Position

We want to consume a Position -- which is (define-struct position (x y)) -- and
produce a Position, a value of the exact same type with the exact same data
structure.

But what if we do this:  Position MouseEvent -> Position

We know Position data is structured like so:  (define-struct position (x y))
We know MouseEvent data is structured like so:

MouseEvent: (one-of/c "button-down" "button-up" "drag" "move" "enter" "leave")

Does this mean that we 'compose' the two data types and end up with a new
composition of Position? Let's take a look at the Prof's STUB function for
handle-mouse:

; (define handle-mouse p me) p) ; Stub

In the stub, 'p' is the variable for Position and 'me' is the variable for
MouseEvent, both inputs to the handle-mouse function; they produce a 'p'
which is a Position. But that right-most 'p' in the function is now a
composition of 'p' and 'me' -- it's a newly composed kind of 'p'. Yes?

|----------------|
As the Prof. says in the HtDF course reference material:

A signature has the type of each argument, separated by spaces, followed by ->,
followed by the type of result. So a function that consumes an image and
produces a number would have the signature Image -> Number.

Note that the stub is a syntactically complete function definition that produces
a value of the right type. If the type is Number it is common to use 0, if the
type is String it is common to use "a" and so on. The value will not, in 
general, match the purpose statement. In the example below the stub produces 0,
which is a Number, but only matches the purpose when double happens to be
called with 0.

;; Number -> Number
;; produces n times 2

(define (double n)  0)  ; this is the stub
|----------------|

**===== 11/8 -- a bust =====**

**===== 11/7 morning session; start @ 0601, finish @ 0628**

Early to bed, late to study. I needed some sleep, though. Definitely.

Domain analysis is rewritten and looks much better. Yesterday you had the
thought that you'd simply type-in the mouse tracker solution for muscle memory
purposes. Do that now since you only have another 20 minutes of study time.

Left off with only 10 lines of code to rewrite, but this will be a good starting
point for your next study session.

**===== 11/6 morning session; start @ 0452, finish @ 0601**

Have to be on the road to Randolph by 0655 this morning...

Look at this Racket Help Desk entry in the 2htdp/image documentation for 'text'

    (text string font-size color) -> image?
       string : string?
       font-size : (and/c integer? (<=/c 1 255))
       color : image-color?
       
Constructs an image that draws the given string, using the font size & color.
Example:

     (text "Hello" 24 "olive")
     
This is beginning to help me see how to understand a documentation reference
like: and/c integer? but why do they use the lower case 'c'?

Using your pencil & pens, rewrite your domain analysis taking into account some
of the things you've learned recently. Doing this now until it's time to stop.

**===== 11/5 morning session; start @ 0519, finish @ 0624**

I spoke to Peter quickly and told him that I'd bring the TeachPack document,
section 2.4, with me to lunch today.

2.4.2 says that the simplest kind of animated world is a time-based simulation,
which is a series of images. If the programmer's task is to supply a function
that creates an image for each natural number and hands this function to the
teachpack to display the simulation,

(animate create-image) -> natural-number/c
   create-image : (-> natural-number/c scene?)
   
opens a canvas and starts a clock that ticks at 28 times per second.

I need to understand what that /c means -- what is it's significance.

In my mouse-tracker program, I just noticed that I forgot to do the template
rules used, i.e.,

;; Template rules used:
;;  - compound: 2 fields

Now, think about this part of big-bang:

(on-mouse handle-mouse)))  ; MPosition MouseEvent -> MPosition

Which, in the Prof's code, translates to:

(define (handle-mouse p x y me)
  (cond [(mouse=? me "move") (make-position x y)]
        [else p])
        
The comment MPosition MouseEvent -> MPosition is handled in the code with the
variables: p x y me, where p is the initial MPosition, x y are arguments to
MouseEvent (which is part of universe TeachPack library), and me is the last
MPosition.

**===== 11/4 morning session; start @ 0533, finish @ 0629**

Read-up again on MouseEvent. I need to understand how the documentation 
explains, and how to use, the procedures and syntax.

Started to write a scenario on paper and from this exercise noticed that I had
a misconception about how the program worked. I initially thought that the x y
coordinates would be display when the user *clicked* a location on the empty
scene, but that is wrong. The coordinates are constantly displayed as soon as
the mouse cursor enters the empty scene.

**===== 11/3 morning session; start @ 0625, finish @ 0737**

Changed structure name from mpoint to mouse-position for clarity purposes.

Reviewing Compound Structures chapter in the HtDP online book.

http://www.htdp.org/2003-09-26/Book/curriculum-Z-H-9.html#node_fig_Temp_35

When I get to the functions section of the program and see WS -> WS, I'm not
confident about how to put everything together.

I think I finally put together the off-line version of the course in a format
that makes sense and can be used.

Starting to look at the solution and right away, two things jump out:

+ I didn't define constants for the TEXT that has to be displayed
+ my constant definitions were random
  => the Prof. had two examples: one for upper-left & one for lower-right
  => upper-left = 0 0
  => lower right = WIDTH HEIGHT
  
Nung-Poo is awake...

**===== 11/2 evening session; start @ 2257, finish @ 2311**

Clocks back an hour tonight! Late for study, but must study! :-)

You've read the docs for a couple of days, now let's get back to that mouse
tracker program.

The problem states, "Design a world program that displays the current (x, y)
position of the mouse at that current position: as the mouse moves, the 
numbers in the (x, y) display changes and its position changes."

Back to the TeachPacks documentation, section 2.4.3, Interactions.

**===== 11/1 morning session; start @ 0555, finish @ 0629**

All Saints! Thanks be to God for His Saints, especially Mary, Queen of Saints!

Up late, but it's really (kind of) OK because I did spend time yesterday after-
noon reading/scanning section 2.4 in the teachpack documentation and even
tried the UFO example function. I learned that the only mandatory clause of a
big-bang description is to-draw -- I recall unknowingly struggling with this
recently.

A teachpack extends the set of procedures that are built into a language in
DrRacket. For example, a teachpack might extend the Beginning Student language
with a procedure for playing sounds.

A tool extends the set of utilities within the DrRacket environment. For
example, DrRacket’s Check Syntax button starts a syntax-checking tool.

http://docs.racket-lang.org/guide/modules.html

C:\Program Files\Racket\collects\teachpack\htdp

Done exploring documentation for this morning. I'm not going to commit right now
*because* I want to be sure I do work this evening. Back to the examples in the
prologue.

**===== 10/31 morning session; start @ 0501, finish @ 0625**

Reading in Randolph didn't happen so this morning is yet more reading (starting
in the prologue in section 1.2).

Notice: the function used for the rocket example -- y = x * x -- has the rocket
DESCENDING because y ccordinates are measured DOWNWARDS, not upwards.

Point from the notes: functions provide a rather economic way of computing lots
of interesting values with a single expression. Indeed, programs are functions,
and once you understand functions well, you know almost everything there is
about programming.

(define (FunctionName InputName) BodyExpression)

Above is a function definition - the keyword 'define' distinguishes it from an
expression. A function definition consists of three pieces: two names and an
expression.

(FunctionName ArgumentExpression)

Above is a function application. The first part tells Dr. Racket which function
you wish to use. The second part is the input to which you wish to apply the
function.

Now consider (define (FunctionName InputName) BodyExpression) using these:

(define (y x) (* x x ))  ; the first example

Here the FunctionName is y; the InputName is x; BodyExpression is (* x x).

Now a little more complex...

(define (create-rocket-scene height)
    (place-image <rocket pic> 50 height (empty-scene 100 100)))

FunctionName is create-rocket-scene.
InputName is height.
BodyExpression is (place-image <rocket pic> 50 height (empty-scene 100 100)))

Here the 50 is the x coord. If you change it to say, 25, the rocket moves to the
left in the scene. Height is the y coord -- the smaller the number, the closer
the rocket will be to the top of the scene.

Getting time to sign-off. You sent yourself an e-mail about this topic so you
can look at it throughout the day. It's really important that you have a solid
understanding about this subject matter. You need to be confident with it, too.

**===== 10/30 morning session; start @ 0533, finish @ 0627**

Had to sleep a little more this morning. Watched a fascinating presentation
about Coq last night (forwarded to me by Peter).

For the first time yesterday I made my first real contact with the Dr. Racket
documentation, which is "both bogus and sad" but, whatever. The lesson here is
that if you are going to learn to program then it will be very important and you
will spend a good amount of time reading a variety of documentation. That said,
I'm starting this morning by reading the HtDP2e prologue. Another section that
seems to have content I should consider reading is TeachPack -- "Worlds and the
Universe: universe.rkt". This immediately referred me to the prologue, which I'm
now reading.

Notes from reading:

+ a primitive is also called a built-in
+ to compute is to determine the value of expressions
+ values can be numbers, strings and even images in BSL

The notation you learned in school is utterly misleading, i.e. y = x * x

(define (y x) (* x x ))

The define says "consider y a function". Seeing this made my understanding of
what a function is in Dr. Racket a little more concrete today. It's good that
I'm stopping to do some reading. Signing-off for now but hope to find some time
in Randolph to do some reading, too.

**===== 10/29 morning session; start @ 0448, finish @ 0617**

Keep going. Yesterday during work and in the evening you had some thoughts
about this mouse tracking program:

+ a mouse click is an event that can trigger something
+ the trigger can be used to capture input
+ the input captured will be the mouse (x,y) coord.
+ these instantaneous (x,y) coord's will become the program output

Good, now get a piece of paper and map-out your program (but get your coffee
first).

0500: Philippines (Bunsoy) called. Lolo Shano passed away. I'll always recall
him as a kind and gentle man. God bless you, Lolo. May your soul rest in the 
peace of our Lord and King, Jesus Christ. Blessed Mother, please pray for Lolo.

Thinking about what numeric type to use I finally found the base type/numeric
type reference in Dr. Racket:  (1) Type Reference (1.1) Base Types. Given the
list provided in the reference, Natural falls right before the Negative-Integer.
I'll start by using Natural with this problem.

*NOTE*: you should have started by referring to the HtDW recipe to follow the
steps there, however, you started with the data definitions. This isn't the end
of the world because the order you executed was only one step off, i.e. you
should have defined constants after sketching the program scenario. Identifying
constants (from my sketch) now.

OK, I'm at a point where I'm not 100% sure what the next best step is *and* it's
almost the end of my study time. I do know this: I should read section 2.4 in
the help.  It explains "Worlds and the Universe".  Section 2.4.4.1 has a good
example of a state machine using a door as an example.

Signing-off at 0616, doing my Git commit, and making some oatmeal.

**===== 10/2 morning session; start @ 0448, finish @ 0627**

Up early. You MUST change now. You are showing your pattern again. This is the 
time that you MUST get through, so do it.

Your first thought when looking at the data definition problem was that there's
a trick question here because it looks too simple.

The tricky part comes at the Signature, i.e. Trip Trip -> Trip

You're supposed to compare two trips and return the trip with the longest
duration.

Done with the trip solution at 0536, roughly 45 minutes. It's worth noting that
although you didn't grasp the syntax & structure of the 'if' statement right
away, you did implement it without too much trouble. Here it is for reference:

(define (longer-trip t1 t2)
  (if (> (trip-duration t1) (trip-duration t2))
         t1
         t2))
         
It's also worth noting that the Prof. mentions on the HtDD page for compounds
that it's often useful to have numerous examples. In this trip problem I had
three and it saved me from typing out the 'make-trip' with all of the needed
parameters for each check-expect. It also made it easier to run the program,
i.e. (longer-trip T1 T2).

Starting the next problem (after a short break) at 0557; the rest of the
problems involve HtDW.

Starting tracker.rkt, a HtDW program that displays the current mouse (x,y).

Watched Prof. at 22mins in the third lecture (because of notes in notebook)
where he speaks of helper functions and he clarifies that each function should
perform only one (1) task. He exhorts us to look out for places to use 
separate functions.

A better study day, but you still need to work the junk out of your habits and
attitude. You're also feeling a bit intimidated by the programs you'll need to
solve, but as the Prof. mentioned, it's critical to get a grasp on designing
worlds well in order to complete the exercises that are coming in the weeks to
follow.

**===== 10/26 evening session; start @ 2200, finish @ 2230 =====**

World Series is on. Boston losing 2-1 in the top of the 6th.

Look at the problem B definition. It implies, I think, the use of an *and*
statment, i.e. "if the student has allergies *and* is in a qualifying grade,
their name should be added to a special list."

Overall it went OK your second time around, however, you were tempted to do the
following when writing the function:

(define (add-student? s)
  (and (<= (student-grade s) 6)
         (student-allergies? s) true))
         
This is wrong. The 'true' doesn't belong on the last line -- it should be
deleted.

The problems coming-up this week look formidable. You're still in a bit of a
lazy mood with regard to coding. Hang in there and press onward!

**===== 10/25 evening session; start @ 2105, finish @ 2135 =====**

Hooray! You're off of your lazy butt and you're working on CS like your said you
would!

Trying the student compound data definition problem. The "grade" is throwing me
off a bit because I wanted to put grade[1, 12] in the structure definition, but
it doesn't belong here.

When you got to the examples section of the HtDD template you weren't sure how
to create a good example, i.e. you forgot about the need for make-student.

Just starting the function now and my brain is getting hazy. Take a break.

**===== 10/25 morning session; start @ 0510, finish @ 0617 =====**

Started by reviewing cowabunga code in the steps laid out by the Prof. Getting
back to student problem; working on function definition.

Checked my data definition against the Prof's. I used Integer for the student
grade where the Prof. uses Natural[1, 12]. You have to remember this for bounded
lists like these student grades. You also forgot to capitalize the first letter
of your data definition for Student. You also forgot to add a "?" to your
boolean value for allergy, i.e. (student-allergy? s). And for some silly reason,
you cited the template rules used as a compound with *2* fields when it's 3.

When you started the HtDF, you first made the signature Student -> Student when
it's supposed to be Student -> Boolean.

During the function definition and check-expect remember that your function is a
boolean, so it's name needs to be add-student? Then, for the check-expect, you
need to use the make-student compound data definition, like so:

(check-expect (add-student? (make-student "Bob" 5 true)) true)

You were stuck and decided to not spend much time figuring out the actual
structure of the function. There is a need to use "and" to qualify the condition
needed for a student to be marked as being in the correct grade range *and*
having an allergy.

You really should write the program again without looking at anything so that
the structure and tools in it become more fixed in your thinking.

**===== 10/24 morning session; start @ 0625, finish @ 0705 =====**

Off today -- Dad's in town for lunch, hence the later start.

Don't forget to use the HtDD and HtDF template you created when working probs.

Got through data definition. MUST find time later today to complete this problem
and move on to another one.  Didn't make time -- bad dog.

**===== 10/23 morning session; start @ 0515, finish @ 0549 =====**

I have to leave for Randolph by 0645 so I'll have to adjust accordingly.

Have another look at 8:45 and on in the last video (cowabunga). You need to 
start working on some problems and get out of video watching mode.

**===== 10/22 morning session; start @ 0505, finish @ 0627 =====**

You just finished analyzing the traffic light solution from 0505 to 0542. Now
it's on to designing compound data definitions (to represent information that
consists of two or more naturally connected values).

Watching the three videos now. During the second video at 4:23 the Prof. talks
about how the data driven template for compound data definitions is interpreted.
Have a look at the example used in the HtDD page:

(define-struct ball (x y))
;; Ball is (make-ball Number Number)
;; interp. a ball at position x, y 

(define BALL-1 (make-ball 6 10))

#;
(define (fn-for-ball b)
  (... (ball-x b)     ;Number
       (ball-y b)))   ;Number
;; Template rules used:
;;  - compound: 2 fields

You'll only get through watching the first two videos this morning; the last
video is 30 minutes long and the cowabunga! problem will take awhile to really
digest. This topic also have a good number of exercises with it -- it seems
important that you gain a firm understanding of this. Look back and see how much
better you feel about your understanding of data definitions and functions after
making the 3+ week investment in doing the topics all over again, slowly and 
deliberately.

Press on! :-)